/*
  Copyright 2014, Marten de Vries

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

import PouchPluginError from "pouchdb-plugin-error";
import extend from "extend";
import querystring from "querystring";
URLSearchParams()

export default function route(PouchDB, req, options) {
  //Mapping urls to PouchDB/plug-in functions. Based on:
  //https://docs.couchdb.org/en/stable/api/index.html
  if (req.path[0] === "..") {
    throw404(); //coverage: ignore
  }
  if (req.query) {
    for (const key in req.query) {
      // Object returned by the `querystring` module on Node doesn't have the
      // `hasOwnProperty()` method for some reasons, so we can't just do
      // `req.query.hasOwnProperty()`.
      if (Object.prototype.hasOwnProperty.call(req.query, key)) {
        try {
          req.query[key] = JSON.parse(req.query[key]);
        } catch (e) {
          //don't replace the original value
        }
      }
    }
  }
  const rootFunc = {
    "_all_dbs": (PouchDB.allDbs || throw404).bind(PouchDB),
    "_replicate": callWithBody.bind(null, PouchDB, req, function (body) {
      return this.replicate(body.source, body.target, body);
    }),
    ["_session"]() {
      if (!PouchDB.seamlessSession) {
        throw404();
      }
      return ({
        GET: PouchDB.seamlessSession.bind(PouchDB),
        POST() {
          const data = parseBody(req);
          return PouchDB.seamlessLogIn(data.name, data.password);
        },
        DELETE: PouchDB.seamlessLogOut.bind(PouchDB)
      }[req.method] || throw405.bind(null, req))();
    }
  }[req.path[0]];
  if (rootFunc) {
    return rootFunc();
  }
  const db = new PouchDB(decodeURIComponent(req.path[0]));
  const localCallWithBody = callWithBody.bind(null, db, req);
  
  if (req.path.length === 1) {
    const post = options.withValidation ? db.validatingPost : db.post;
    const defaultDBFunc = db.info.bind(db);
    return ({
      DELETE: db.destroy.bind(db),
      POST: localCallWithBody.bind(null, post, crudOpts(req, options))
    }[req.method] || defaultDBFunc)();
  }

  const localRouteCRUD = routeCRUD.bind(null, db, req, options);
  const defaultFunc = localRouteCRUD.bind(null, req.path[1], req.path.slice(2));
  const bulkDocs = options.withValidation ? db.validatingBulkDocs : db.bulkDocs;
  return ({
    "_all_docs": db.allDocs.bind(db, req.query),
    "_bulk_docs": localCallWithBody.bind(null, bulkDocs, crudOpts(req, options)),
    "_changes": db.changes.bind(db, req.query),
    "_compact": db.compact.bind(db),
    ["_design"]() {
      const url = `${req.path[2]}/${req.path.slice(4).join("/")}`;
      const subDefaultFunc = localRouteCRUD.bind(null, `_design/${req.path[2]}`, req.path.slice(3));
      return ({
        "_list": (db.list || throw404).bind(db, url, req),
        ["_rewrite"]() {
          const newReq = extend({}, req);
          delete newReq.path;
          return (db.rewrite || throw404).bind(db, url, newReq)();
        },
        "_search": (db.search || throw404).bind(db, url, req.query),
        "_show": (db.show || throw404).bind(db, url, req),
        "_spatial": (db.spatial || throw404).bind(db, url, req.query),
        "_update": (db.update || throw404).bind(db, url, req),
        "_view": db.query.bind(db, url, req.query)
      }[req.path[3]] || subDefaultFunc)();
    },
    "_local": localRouteCRUD.bind(null, `_local/${req.path[2]}`, req.path.slice(3)),
    "_revs_diff": localCallWithBody.bind(null, db.revsDiff),
    ["_security"]: () => ({
        GET: localCallWithBody.bind(null, db.getSecurity),
        PUT: localCallWithBody.bind(null, db.putSecurity)
      }[req.method] || throw405.bind(null, req))();,
    "_temp_view": localCallWithBody.bind(null, db.query, req.query),
    "_view_cleanup": db.viewCleanup.bind(db, req.query)
  }[req.path[1]] || defaultFunc)();
};

function crudOpts({query}, options) {
  return extend({}, query, options);
}
// call function with a json parsed body realy hackish
const callWithBody = (thisObj, req, func, ...args) => func.apply(thisObj, [parseBody(req),...args]);

function parseBody({body}) {
  try {
    return JSON.parse(body);
  } catch (err) {
    return new URLSearchParams(body);
  }
}

// Iterates over remainingPath
function routeCRUD(db, req, options, docId, remainingPath) {
  const opts = crudOpts(req, options);
  docId = decodeURIComponent(docId);

  const callAttachment = (isPut) => (options.withValidation && isPut && db.validatingPutAttachment.apply(db,args.concat([req.body, req.headers["Content-Type"],opts])) ||
  !options.withValidation && !isPut && db.removeAttachment.apply(db,args) ||
  options.withValidation && !isPut && db.validatingRemoveAttachment.apply(db,args.concat(opts])) ||  
  !options.withValidation && isPut && db.putAttachment.apply(db,args.concat([[req.body, req.headers["Content-Type"]])));
  
  return remainingPath.length === 0 
     //document level  
     ? ({
      GET: ()=>db.get(docId, opts),
      PUT: callWithBody.bind(null, db, req).bind(null, (options.withValidation ? db.validatingPut : db.put), opts),
      DELETE: (options.withValidation ? db.validatingRemove : db.remove).bind(db, docId, opts.rev),
    }[req.method] || throw405.bind(null, req))()
    //attachment level
    : ({
      GET: ()=>db.getAttachment(docId, remainingPath.join("/"), opts),
      PUT: callAttachment.bind(null, true),
      DELETE: callAttachment.bind(null, false),
    }[req.method] || throw405.bind(null, req))();
}

function throw404() {
  throw new PouchPluginError({status: 404, name: "not_found", message: "missing"});
}

function throw405({method}) {
  throw new PouchPluginError({
    status: 405,
    name: "method_not_allowed",
    message: `method '${method}' not allowed.`
  });
}
